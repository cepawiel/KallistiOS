name: Linux Docker Containers
on: push

jobs:
  setup:
    name: Gathering Pre-Build Info
    runs-on: ubuntu-latest
    outputs:
      github-token-exists:  ${{ steps.check-gh-token.outputs.defined }}
    steps:
      - uses: actions/checkout@v4
      - id: check-gh-token
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        run: echo "defined=true" >> $GITHUB_OUTPUT

  docker_build_matrix:
    needs: [setup]
    name: Build Toolchain Containers
    runs-on: [self-hosted, X64]
    strategy:
      fail-fast: false
      matrix:
        include:
          # - { toolchain_profile: '9.3.0-legacy' }
          # - { toolchain_profile: '9.5.0-winxp' }
          # - { toolchain_profile: '10.5.0' }
          # - { toolchain_profile: '11.4.0' }
          # - { toolchain_profile: '12.3.0' }
          - { toolchain_profile: 'stable' }
          # - { toolchain_profile: '13.3.0' }
          # - { toolchain_profile: '14.1.0' }
          # - { toolchain_profile: '13.3.1-dev' }
          # - { toolchain_profile: '14.1.1-dev' }
          # - { toolchain_profile: '15.0.0-dev' }

    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Toolchain Container Metadata
        id: toolchain-meta
        uses: docker/metadata-action@v5
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        with:
          images: ghcr.io/cepawiel/toolchain-kos-sh4
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }}
          tags: |
            type=sha

      - name: Build Toolchain Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/Dockerfile
          target: toolchain
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.toolchain-meta.outputs.tags }}
          labels: ${{ steps.toolchain-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - name: Generate KOS Container Metadata
        id: kos-meta
        uses: docker/metadata-action@v5
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        with:
          images: ghcr.io/cepawiel/kos-dc
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }}
          tags: |
            type=sha

      - name: Build KOS Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/Dockerfile
          target: kos
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.kos-meta.outputs.tags }}
          labels: ${{ steps.kos-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - name: Generate KOS-Ports Container Metadata
        id: kos-ports-meta
        uses: docker/metadata-action@v5
        env:
          GH_TOK: ${{ secrets.GITHUB_TOKEN }}
        if: "${{ env.GH_TOK != '' }}"
        with:
          images: ghcr.io/cepawiel/kos-ports-dc
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }}
          tags: |
            type=sha

      - name: Build KOS-Ports Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: .github/workflows/Dockerfile
          target: kos-ports
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.kos-ports-meta.outputs.tags }}
          labels: ${{ steps.kos-ports-meta.outputs.labels }}
          push: ${{ needs.setup.outputs.github-token-exists == 'true' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - name: Build Examples
        run: |
          echo ${{ steps.kos-ports-meta.outputs.tags }}
          ls -la ${{ github.workspace }}
          ls -la ${{ github.workspace }}/examples
          ls -la ${{ github.workspace }}/examples/dreamcast
          docker run --rm \
            -v ${{ github.workspace }}/examples/dreamcast:/examples \
            -w /examples \
            ${{ steps.kos-ports-meta.outputs.tags }} make

          find examples -name '*.elf' -print0 | tar -czf examples-${{ matrix.toolchain_profile }}.tar.gz --null --files-from -
          ls -la
          ls -la ${{ github.workspace }}


      # - uses: addnab/docker-run-action@v3
      #   with:
      #     image: ${{ steps.kos-ports-meta.outputs.tags }}
      #     options: -v ${{ github.workspace }}/output:/output -w /opt/toolchains/dc/kos/examples/dreamcast
      #     run: |
      #       ls -la /output
      #       echo Building examples for ${{ steps.kos-ports-meta.outputs.tags }}

      #       set -x
      #       set -e

      #       echo $KOS_BASE
      #       make 
      #       make dist 

      #       mkdir /examples
      #       find -type f -name \"*.elf\" -exec cp {} /examples \; 
      #       cd /
            
      #       tar -czf output/examples-${{ matrix.toolchain_profile }}.tar.gz examples
      #       ls -la output
      #       ls -la /output


      - name: Upload Examples
        uses: actions/upload-artifact@v3
        with:
         name: examples-${{ matrix.toolchain_profile }}
         path: examples-${{ matrix.toolchain_profile }}.tar.gz
