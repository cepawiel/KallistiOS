#![no_std]

extern "C" {
    fn print_header();
    fn start_pvr() -> bool;

    //
    fn pvr_wait_ready() -> i32;
    fn pvr_scene_begin() -> i32;
    fn pvr_list_begin_tr() -> i32;
    fn pvr_list_finish() -> i32;
    fn pvr_scene_finish() -> i32;

    //
    fn cubes_one_frame() -> ();
    // fn draw_cube(which : i32) -> ();
    fn send_pvr_prim(cp : i32, xt : f32, yt : f32, z : f32, ztrans : f32) -> ();

}

const SIN_TABLE : [f32; 1024] = [
        0.000000, 0.024541, 0.049068, 0.073565, 0.098017, 0.122411, 0.146730,
        0.170962, 0.195090, 0.219101, 0.242980, 0.266713, 0.290285, 0.313682,
        0.336890, 0.359895, 0.382683, 0.405241, 0.427555, 0.449611, 0.471397,
        0.492898, 0.514103, 0.534998, 0.555570, 0.575808, 0.595699, 0.615232,
        0.634393, 0.653173, 0.671559, 0.689541, 0.707107, 0.724247, 0.740951,
        0.757209, 0.773010, 0.788346, 0.803208, 0.817585, 0.831470, 0.844854,
        0.857729, 0.870087, 0.881921, 0.893224, 0.903989, 0.914210, 0.923880,
        0.932993, 0.941544, 0.949528, 0.956940, 0.963776, 0.970031, 0.975702,
        0.980785, 0.985278, 0.989177, 0.992480, 0.995185, 0.997290, 0.998795,
        0.999699, 1.000000, 0.999699, 0.998795, 0.997290, 0.995185, 0.992480,
        0.989177, 0.985278, 0.980785, 0.975702, 0.970031, 0.963776, 0.956940,
        0.949528, 0.941544, 0.932993, 0.923880, 0.914210, 0.903989, 0.893224,
        0.881921, 0.870087, 0.857729, 0.844854, 0.831470, 0.817585, 0.803208,
        0.788346, 0.773010, 0.757209, 0.740951, 0.724247, 0.707107, 0.689541,
        0.671559, 0.653173, 0.634393, 0.615232, 0.595699, 0.575808, 0.555570,
        0.534998, 0.514103, 0.492898, 0.471397, 0.449611, 0.427555, 0.405241,
        0.382683, 0.359895, 0.336890, 0.313682, 0.290285, 0.266713, 0.242980,
        0.219101, 0.195090, 0.170962, 0.146730, 0.122411, 0.098017, 0.073565,
        0.049068, 0.024541, 0.000000, -0.024541, -0.049068, -0.073565, -0.098017,
        -0.122411, -0.146730, -0.170962, -0.195090, -0.219101, -0.242980,
        -0.266713, -0.290285, -0.313682, -0.336890, -0.359895, -0.382683,
        -0.405241, -0.427555, -0.449611, -0.471397, -0.492898, -0.514103,
        -0.534998, -0.555570, -0.575808, -0.595699, -0.615232, -0.634393,
        -0.653173, -0.671559, -0.689541, -0.707107, -0.724247, -0.740951,
        -0.757209, -0.773010, -0.788346, -0.803208, -0.817585, -0.831470,
        -0.844854, -0.857729, -0.870087, -0.881921, -0.893224, -0.903989,
        -0.914210, -0.923880, -0.932993, -0.941544, -0.949528, -0.956940,
        -0.963776, -0.970031, -0.975702, -0.980785, -0.985278, -0.989177,
        -0.992480, -0.995185, -0.997290, -0.998795, -0.999699, -1.000000,
        -0.999699, -0.998795, -0.997290, -0.995185, -0.992480, -0.989177,
        -0.985278, -0.980785, -0.975702, -0.970031, -0.963776, -0.956940,
        -0.949528, -0.941544, -0.932993, -0.923880, -0.914210, -0.903989,
        -0.893224, -0.881921, -0.870087, -0.857729, -0.844854, -0.831470,
        -0.817585, -0.803208, -0.788346, -0.773010, -0.757209, -0.740951,
        -0.724247, -0.707107, -0.689541, -0.671559, -0.653173, -0.634393,
        -0.615232, -0.595699, -0.575808, -0.555570, -0.534998, -0.514103,
        -0.492898, -0.471397, -0.449611, -0.427555, -0.405241, -0.382683,
        -0.359895, -0.336890, -0.313682, -0.290285, -0.266713, -0.242980,
        -0.219101, -0.195090, -0.170962, -0.146730, -0.122411, -0.098017,
        -0.073565, -0.049068, -0.024541
];

const ZCONST : f32 = 128.0;
const MULT : f32 = 64.0;
const NUM_FACES : usize = 6;
const CUBE_POINTS : [f32; NUM_FACES * 12] = [
    -1, -1,  1, /* Front plane */
    -1,  1,  1,
    1, -1,  1,
    1,  1,  1,

    1, -1, -1, /* Back plane */
    1,  1, -1,
    -1, -1, -1,
    -1,  1, -1,

    -1, -1, -1, /* Left plane */
    -1,  1, -1,
    -1, -1,  1,
    -1,  1,  1,

    1, -1,  1, /* Right plane */
    1,  1,  1,
    1, -1, -1,
    1,  1, -1,

    -1, -1, -1, /* Top plane */
    -1, -1,  1,
    1, -1, -1,
    1, -1,  1,

    -1,  1,  1, /* Bottom plane */
    -1,  1, -1,
    1,  1,  1,
    1,  1, -1
];

static mut ZOOMING: bool = true;
static mut CUBESIZES : [f32; 6] = [0.0; 6];
static mut ROTANG : i32 = 0;

#[no_mangle]
fn main() -> () {
    unsafe {
        print_header();
        start_pvr();

        loop {
            pvr_wait_ready();
            pvr_scene_begin();
            pvr_list_begin_tr();

            cubes_one_frame();

            pvr_list_finish();
            pvr_scene_finish();
        }
    }
}

#[no_mangle]
pub extern "C" fn cube_one_frame() -> () {
    unsafe {
        ROTANG = (ROTANG + 1) % 512;
        if ZOOMING {
            let mut i = 0;
            loop {
                // https://github.com/Rust-GCC/gccrs/issues/869 :(
                let current = i;
                i = i + 1;
                if CUBESIZES[current] < 1.0f32 {
                    CUBESIZES[current] += 1.0f32 / 85.0f32;
                    break;
                } else {
                    CUBESIZES[current] = 1.0f32;
                }

                if i >= 6 {
                    ZOOMING = false;
                }
            }
        }

        let j: usize = 0;
        loop {
            draw_cube(j);
            j = j + 1;
            if j >= 6 {
                break;
            }
        }
    }
}

fn msin(angle: i32) -> f32 {
    SIN_TABLE[angle as usize]
}

fn mcos(angle: i32) -> f32 {
    SIN_TABLE[(angle as usize + 64) % 256]
}

fn draw_cube(which: usize) {
    unsafe {
        if CUBESIZES[which] < 0.1f32 {
            return;
        }

        let mut ra: i32 = (ROTANG * 2) % 256;
        ra = (ra + 42 * (which as i32)) % 256;
        let ra2: i32 = (ROTANG / 2);

        let xtrans: f32 = mcos(ra) * 220.0;
        let ytrans: f32 = msin((ra * 3) % 256) * 32.0;
        let ztrans: f32 = msin(ra) * 256.0 + 256.0;

        let mut cp : usize = 0;
        loop {
            let mut x : f32 = CUBE_POINTS[cp + 0] * MULT * CUBESIZES[which];
            let mut y : f32 = CUBE_POINTS[cp + 1] * MULT * CUBESIZES[which];
            let mut z : f32 = CUBE_POINTS[cp + 2] * MULT * CUBESIZES[which];

            let mut tx : f32 = mcos(ra) * x - msin(ra) * y;
            let mut ty : f32 = mcos(ra) * y + msin(ra) * x;
            x = tx;
            y = ty;

            let tz : f32 = mcos(ra2) * z - msin(ra2) * y;
            ty = mcos(ra2) * y + msin(ra2) * z;
            y = ty;
            z = tz;

            tx = mcos(ra) * x - msin(ra) * z;
            tz = mcos(ra) * z + msin(ra) * x;
            x = tx;
            z = tz;

            z = z + ztrans;

            let mut xt = (x * ZCONST) / (ZCONST + z + MULT);
            let mut yt = (y * ZCONST) / (ZCONST + z + MULT);

            xt = xt + xtrans;
            yt = yt + ytrans;

            send_pvr_prim(cp as i32, xt, yt, z, ztrans);

            cp = cp + 3;
            if cp >= (NUM_FACES * 4 * 3){
                break;
            }
        }
    }
}
